swagger: '2.0'
info:
  version: 1.0.0
  title: Angelcam API
  description: tbd

host: api.angelcam.com
basePath: /v1

schemes:
  - https
consumes:
  - application/json
produces:
  - application/json

tags:
  - name: user
    description: Current user info
  - name: camera
    description: My Cameras
  - name: shared-camera
    description: Shared Cameras
  - name: camera-guest
    description: Camera Sharing Management
  - name: recording
    description: Cloud Recording
  - name: clip
    description: Recording Clips
  - name: event
    description: Events

# DapperDox: use endpoint summary instead of HTTP method name
x-navigateMethodsByName: true

securityDefinitions:
  OAuth2:
    type: oauth2
    flow: accessCode
    authorizationUrl: https://api.test.angelcam.com/oauth/authorize/
    tokenUrl: https://api.test.angelcam.com/oauth/token/
    scopes:
      read: Grants read access
      write: Grants write access

paths:
  /me/:
    get:
      summary: Current user info
      tags:
        - user
      security:
        - OAuth2: [read]
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserMeResponse'
        '401':
          $ref: '#/responses/Error401Unauthorized'
  '/cameras/':
    get:
      summary: Retrieve camera list
      tags:
      - camera
      parameters:
        - name: limit
          in: query
          type: integer
          minimum: 1
          required: false
          description: 'Limit result set. Example: `1`.'
        - name: offset
          in: query
          type: integer
          minimum: 1
          required: false
          description: 'Return results starting at `offset`. Example: `10`.'
        - name: refresh_rate
          in: query
          type: number
          format: float
          minimum: 0
          required: false
          description: 'Set a maximum number of keyframes sent in MJPEG stream per second. For example if you want to
           have MJPEG stream with keyframe sent every 10 seconds, post value 0.1.'
        - name: max_width
          in: query
          type: integer
          minimum: 1
          required: false
          description: 'Maximum width of MJPEG stream and LIVE SNAPSHOT.'
        - name: max_height
          in: query
          type: integer
          minimum: 1
          required: false
          description: 'Maximum height of MJPEG stream and LIVE SNAPSHOT.'
      security:
        - OAuth2: [read]
      responses:
        '200':
          description: Returns camera list.
          schema:
            $ref: '#/definitions/CameraListResponse'
        '400':
          $ref: '#/responses/Error400InvalidParams'
        '401':
          $ref: '#/responses/Error401Unauthorized'

  '/cameras/{camera_id}/':
    get:
      summary: Retrieve camera
      tags:
        - camera
      parameters:
        - $ref: '#/parameters/cameraId'
        - name: refresh_rate
          in: query
          type: number
          format: float
          minimum: 1
          required: false
          description: 'Set a maximum number of keyframes sent in MJPEG stream per second. For example if you want to
          have MJPEG stream with keyframe sent every 10 seconds, post value 0.1.'
        - name: max_width
          in: query
          type: integer
          minimum: 1
          required: false
          description: 'Maximum width of MJPEG stream and LIVE SNAPSHOT.'
        - name: max_height
          in: query
          type: integer
          minimum: 1
          required: false
          description: 'Maximum height of MJPEG stream and LIVE SNAPSHOT.'
      security:
        - OAuth2: [read]
      responses:
        '200':
          description: Camera object
          schema:
            $ref: '#/definitions/CameraObject'
        '400':
          $ref: '#/responses/Error400InvalidParams'
        '401':
          $ref: '#/responses/Error401Unauthorized'
        '404':
          $ref: '#/responses/Error404NotFound'

  '/cameras/{camera_id}/recording/':
    get:
      summary: General recording information
      tags:
        - recording
      parameters:
        - $ref: '#/parameters/cameraId'
      security:
        - OAuth2: [read]
      responses:
        '200':
          description: Returns general recording information.
          schema:
            $ref: '#/definitions/RecordingResponse'
        '401':
          $ref: '#/responses/Error401Unauthorized'
        '404':
          $ref: '#/responses/Error404CraNotAdded'

  '/cameras/{camera_id}/recording/timeline/':
    get:
      summary: Retrieve timeline of records for given camera
      tags:
        - recording
      description: |
        Please keep in mind that maximum length of timeline is 1 day.
      parameters:
        - $ref: '#/parameters/cameraId'
        - name: start
          in: query
          type: string
          format: date-time
          required: true
          description: 'Start time of a timeline. Example: `2016-03-19T08:00:00Z`.'
          x-example: '2017-01-01T00:00:00Z'
        - name: end
          in: query
          type: string
          format: date-time
          required: true
          description: 'End time of a timeline. Example: `2016-03-19T14:00:00Z.`'
          x-example: '2017-01-01T00:00:00Z'
      security:
        - OAuth2: [read]
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/RecordingTimelineResponse'
        '400':
          $ref: '#/responses/Error400InvalidParams'
        '401':
          $ref: '#/responses/Error401Unauthorized'
        '404':
          $ref: '#/responses/Error404CraNotAdded'

  '/cameras/{camera_id}/recording/stream/':
    get:
      summary: Create and return recorded stream for a specified time
      tags:
        - recording
      parameters:
        - $ref: '#/parameters/cameraId'
        - name: start
          in: query
          type: string
          format: date-time
          required: true
          description: 'Start time of a stream. Example: `2016-03-19T08:00:00Z`.'
          x-example: '2017-01-01T00:00:00Z'
        - name: end
          in: query
          type: string
          format: date-time
          required: false
          description: >
            End time of a stream. If missing, stream will play till the very end of recorded footage.
            Example: `2016-03-19T14:00:00Z.`
          x-example: '2017-01-01T00:00:00Z'
      security:
        - OAuth2: [read]
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/RecordingStreamResponse'
        '400':
          $ref: '#/responses/Error400InvalidParams'
        '401':
          $ref: '#/responses/Error401Unauthorized'
        '404':
          $ref: '#/responses/Error404CraNotAdded'

  '/cameras/{camera_id}/guests/':
    get:
      summary: Retrieve camera guests list
      tags:
      - camera-guest
      parameters:
        - $ref: '#/parameters/cameraId'
        - name: limit
          in: query
          type: integer
          minimum: 1
          required: false
          description: 'Limit result set. Example: `1`.'
        - name: offset
          in: query
          type: integer
          minimum: 1
          required: false
          description: 'Return results starting at `offset`. Example: `10`.'
      security:
        - OAuth2: [read]
      responses:
        '200':
          description: Returns camera guests list.
          schema:
            $ref: '#/definitions/CameraGuestListResponse'
        '404':
          $ref: '#/responses/Error404NotFound'
        '401':
          $ref: '#/responses/Error401Unauthorized'
    post:
      summary: Create camera guest
      tags:
      - camera-guest
      parameters:
        - $ref: '#/parameters/cameraId'
        - in: body
          name: guest
          schema:
            type: object
            title: guest
            required:
              - email
            properties:
              email:
                type: string
                format: email
              permissions:
                $ref: '#/definitions/CameraGuestPermissionObject'
      security:
        - OAuth2: [read,write]
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/CameraGuestObject'
        '404':
          $ref: '#/responses/Error404NotFound'
        '401':
          $ref: '#/responses/Error401Unauthorized'

  '/cameras/{camera_id}/guests/{guest_id}/':
    get:
      summary: Retrieve camera guest
      tags:
        - camera-guest
      parameters:
        - $ref: '#/parameters/cameraId'
        - $ref: '#/parameters/guestId'
      security:
        - OAuth2: [read]
      responses:
        '200':
          description: Camera guest object
          schema:
            $ref: '#/definitions/CameraGuestObject'
        '401':
          $ref: '#/responses/Error401Unauthorized'
        '404':
          $ref: '#/responses/Error404NotFound'
    put:
      summary: Update camera guest
      tags:
      - camera-guest
      parameters:
        - $ref: '#/parameters/cameraId'
        - $ref: '#/parameters/guestId'
        - in: body
          name: guest
          schema:
            type: object
            title: guest
            properties:
              permissions:
                $ref: '#/definitions/CameraGuestPermissionObject'
      security:
        - OAuth2: [read,write]
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CameraGuestObject'
        '404':
          $ref: '#/responses/Error404NotFound'
        '401':
          $ref: '#/responses/Error401Unauthorized'
    delete:
      summary: Remove camera guest
      tags:
        - camera-guest
      parameters:
        - $ref: '#/parameters/cameraId'
        - $ref: '#/parameters/guestId'
      security:
        - OAuth2: [read,write]
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/responses/Error401Unauthorized'
        '404':
          $ref: '#/responses/Error404NotFound'
  '/recording/stream/{streamer_name}/{streamer_id}/':
    get:
      summary: Retrieve recording stream info
      tags:
        - recording
      security:
        - OAuth2: [read]
      parameters:
        - name: streamer_name
          in: path
          type: string
          required: true
          description: Streamer server name.
          x-example: rec-streamer-eu-central-1
        - name: streamer_id
          in: path
          type: string
          required: true
          description: Stream ID.
          x-example: 61c59a859e9244a19713fdfec6e50184
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/RecordingStreamInfoResponse'
        '401':
          $ref: '#/responses/Error401Unauthorized'
        '404':
          $ref: '#/responses/Error404NotFound'

  '/events/':
    get:
      summary: Retrieve event list
      tags:
        - event
      description: Retrieves the list of events for the current user
      parameters:
          - name: start
            in: query
            type: string
            format: date-time
            required: false
            description: 'Example: `2017-03-07T14:00:00Z`.'
          - name: end
            in: query
            type: string
            format: date-time
            required: false
            description: 'Example: `2017-03-08T14:00:00Z`.'
          - name: limit
            in: query
            type: integer
            minimum: 1
            required: false
            description: 'Limit result set. Example: `1`.'
          - name: offset
            in: query
            type: integer
            minimum: 1
            required: false
            description: 'Return results starting at `offset`. Example: `10`.'
      security:
        - OAuth2: [read]
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EventListResponse'
        '400':
          $ref: '#/responses/Error400InvalidParams'
        '401':
          $ref: '#/responses/Error401Unauthorized'
    post:
        summary: Create event
        tags:
        - event
        parameters:
          - in: body
            name: event
            schema:
              type: object
              title: event
              required:
                - hash
              properties:
                hash:
                  type: string
                  description: 'Event API hash (a unique token for each camera found in My Angelcam dashboard or
                  obtained via Camera Resource) - used to authenticate the request and pair the event with corresponding camera.'
                title:
                  type: string
              example:
                hash: "50yxnlu2o2"
        security: []
        responses:
          '201':
            description: Event was received
            schema:
              $ref: '#/definitions/EventObject'
          '400':
            description: "The event hash is invalid or there's another error in the request"
            schema:
              $ref: '#/definitions/Error400Invalid'


  '/cameras/{camera_id}/clips/':
    get:
      summary: Retrieve camera clips list
      tags:
        - clip
      description: 'Retrieves the list of recording clips of given camera'
      security:
        - OAuth2: [read]
      parameters:
        - $ref: '#/parameters/cameraId'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ClipListResponse'
        '400':
          $ref: '#/responses/Error400InvalidParams'
        '401':
          $ref: '#/responses/Error401Unauthorized'
        '404':
          $ref: '#/responses/Error404NotFound'
    post:
      summary: Create clip
      tags:
      - clip
      description: 'Retrieves the list of recording clips of given camera'
      parameters:
        - $ref: '#/parameters/cameraId'
        - in: body
          name: clip
          schema:
            type: object
            title: clip
            required:
              - camera_id
              - name
              - start
              - end
            properties:
              name:
                type: string
                description: Clip name
              start:
                type: string
                format: date-time
                description: Start time of clip (ISO 8601)
              end:
                type: string
                format: date-time
                description: End time of clip (ISO 8601)
            example:
              name: Frontdoor loitering
              start: 2017-01-01T00:00:00Z
              end: 2017-01-01T00:25:00Z
      security:
        - OAuth2: [read,write]
      responses:
        '201':
          description: Clip request was received and clip processing will start
          schema:
            $ref: '#/definitions/ClipObject'
        '400':
          description: "No recording data exists for given timeframe, requested clip lenght exceeds 3 hours or there's another error in the request"
          schema:
            $ref: '#/definitions/Error400Invalid'

  '/cameras/{camera_id}/clips/{clip_id}/':
    get:
      summary: Retrieve a single clip
      tags:
        - clip
      description: 'Retrieves the details of a recording clip'
      parameters:
        - $ref: '#/parameters/cameraId'
        - $ref: '#/parameters/clipId'
      security:
        - OAuth2: [read]
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ClipObject'
        '401':
          $ref: '#/responses/Error401Unauthorized'
        '404':
          $ref: '#/responses/Error404NotFound'


  '/events/{camera_id}/':
    get:
      summary: Retrieve camera event list
      tags:
        - event
      description: 'Retrieves the list of events for the current user belonging to given camera'
      parameters:
        - $ref: '#/parameters/cameraId'
        - name: start
          in: query
          type: string
          format: date-time
          description: 'Example: `2017-03-07T14:00:00Z`.'
          required: false
        - name: end
          in: query
          type: string
          format: date-time
          description: 'Example: `2017-03-07T16:00:00Z`.'
          required: false
        - name: limit
          in: query
          type: integer
          minimum: 1
          description: 'Limit result set. Example: `1`.'
          required: false
        - name: offset
          in: query
          type: integer
          minimum: 1
          description: 'Return results starting at offset. Example: `10`.'
          required: false
      security:
        - OAuth2: [read]
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EventListResponse'
        '400':
          $ref: '#/responses/Error400InvalidParams'
        '401':
          $ref: '#/responses/Error401Unauthorized'
        '404':
          $ref: '#/responses/Error404NotFound'

  '/shared-cameras/':
    get:
      summary: Retrieve shared camera list
      tags:
      - shared-camera
      parameters:
        - name: limit
          in: query
          type: integer
          minimum: 1
          required: false
          description: 'Limit result set. Example: `1`.'
        - name: offset
          in: query
          type: integer
          minimum: 1
          required: false
          description: 'Return results starting at `offset`. Example: `10`.'
        - name: refresh_rate
          in: query
          type: number
          format: float
          minimum: 0
          required: false
          description: 'Set a maximum number of keyframes sent in MJPEG stream per second. For example if you want to
           have MJPEG stream with keyframe sent every 10 seconds, post value 0.1.'
        - name: max_width
          in: query
          type: integer
          minimum: 1
          required: false
          description: 'Maximum width of MJPEG stream and LIVE SNAPSHOT.'
        - name: max_height
          in: query
          type: integer
          minimum: 1
          required: false
          description: 'Maximum height of MJPEG stream and LIVE SNAPSHOT.'
      security:
        - OAuth2: [read]
      responses:
        '200':
          description: Returns shared camera list.
          schema:
            $ref: '#/definitions/SharedCameraListResponse'
        '400':
          $ref: '#/responses/Error400InvalidParams'
        '401':
          $ref: '#/responses/Error401Unauthorized'

  '/shared-cameras/{camera_id}/':
    get:
      summary: Retrieve shared camera
      tags:
        - shared-camera
      parameters:
        - $ref: '#/parameters/sharedCameraId'
        - name: refresh_rate
          in: query
          type: number
          format: float
          minimum: 1
          required: false
          description: 'Set a maximum number of keyframes sent in MJPEG stream per second. For example if you want to
          have MJPEG stream with keyframe sent every 10 seconds, post value 0.1.'
        - name: max_width
          in: query
          type: integer
          minimum: 1
          required: false
          description: 'Maximum width of MJPEG stream and LIVE SNAPSHOT.'
        - name: max_height
          in: query
          type: integer
          minimum: 1
          required: false
          description: 'Maximum height of MJPEG stream and LIVE SNAPSHOT.'
      security:
        - OAuth2: [read]
      responses:
        '200':
          description: Camera object
          schema:
            $ref: '#/definitions/SharedCameraObject'
        '400':
          $ref: '#/responses/Error400InvalidParams'
        '401':
          $ref: '#/responses/Error401Unauthorized'
        '404':
          $ref: '#/responses/Error404NotFound'

  '/shared-cameras/{camera_id}/recording/':
    get:
      summary: General shared recording information
      tags:
        - recording
      parameters:
        - $ref: '#/parameters/sharedCameraId'
      security:
        - OAuth2: [read]
      responses:
        '200':
          description: Returns general recording information.
          schema:
            $ref: '#/definitions/RecordingResponse'
        '401':
          $ref: '#/responses/Error401Unauthorized'
        '404':
          $ref: '#/responses/Error404CraNotAdded'

  '/shared-cameras/{camera_id}/recording/timeline/':
    get:
      summary: Retrieve timeline of records for given shared camera
      tags:
        - recording
      description: |
        Please keep in mind that maximum length of timeline is 1 day.
      parameters:
        - $ref: '#/parameters/sharedCameraId'
        - name: start
          in: query
          type: string
          format: date-time
          required: true
          description: 'Start time of a timeline. Example: `2016-03-19T08:00:00Z`.'
          x-example: '2017-01-01T00:00:00Z'
        - name: end
          in: query
          type: string
          format: date-time
          required: true
          description: 'End time of a timeline. Example: `2016-03-19T14:00:00Z.`'
          x-example: '2017-01-01T00:00:00Z'
      security:
        - OAuth2: [read]
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/RecordingTimelineResponse'
        '400':
          $ref: '#/responses/Error400InvalidParams'
        '401':
          $ref: '#/responses/Error401Unauthorized'
        '404':
          $ref: '#/responses/Error404CraNotAdded'

  '/shared-cameras/{camera_id}/recording/stream/':
    get:
      summary: Create and return recorded stream of shared camera for a specified time
      tags:
        - recording
      parameters:
        - $ref: '#/parameters/sharedCameraId'
        - name: start
          in: query
          type: string
          format: date-time
          required: true
          description: 'Start time of a stream. Example: `2016-03-19T08:00:00Z`.'
          x-example: '2017-01-01T00:00:00Z'
        - name: end
          in: query
          type: string
          format: date-time
          required: false
          description: >
            End time of a stream. If missing, stream will play till the very end of recorded footage.
            Example: `2016-03-19T14:00:00Z.`
          x-example: '2017-01-01T00:00:00Z'
      security:
        - OAuth2: [read]
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/RecordingStreamResponse'
        '400':
          $ref: '#/responses/Error400InvalidParams'
        '401':
          $ref: '#/responses/Error401Unauthorized'
        '404':
          $ref: '#/responses/Error404CraNotAdded'


definitions:
  UserMeResponse:
    type: object
    title: User object
    properties:
      id:
        type: integer
        minimum: 0
        description: User ID.
      first_name:
        type: string
        description: User's first or given name.
      last_name:
        type: string
        description: User's last or family name.
      email:
        type: string
        format: email
        description: User's email.
      phone:
        type: ['string','null']
        description: User's phone.
    required:
      - id
      - email
    example:
      id: 2929
      first_name: "John"
      last_name: "Appleseed"
      email: "john@apple.com"
      phone: "+123 558 951 14"

  OwnerObject:
    type: object
    title: Owner object
    properties:
      first_name:
        type: string
        description: User's first or given name.
      last_name:
        type: string
        description: User's last or family name.
      email:
        type: string
        format: email
        description: User's email.
    required:
      - email
    example:
      first_name: "John"
      last_name: "Appleseed"
      email: "john@apple.com"

  CameraListResponse:
    type: object
    title: Camera list
    properties:
      count:
        type: integer
        description: Count of all cameras
      next:
        type: ['string','null']
        format: uri
        description: Next page from pagination
      previous:
        type: ['string','null']
        format: uri
        description: Previous page from pagination
      results:
        type: array
        description: List of cameras owned by the user
        items:
          $ref: '#/definitions/CameraObject'
    required:
      - count
      - next
      - previous
      - results

  CameraGuestListResponse:
    type: object
    title: Camera guests list
    properties:
      count:
        type: integer
        description: Count of all camera guests
      next:
        type: ['string','null']
        format: uri
        description: Next page from pagination
      previous:
        type: ['string','null']
        format: uri
        description: Previous page from pagination
      results:
        type: array
        description: List of camera guests
        items:
          $ref: '#/definitions/CameraGuestObject'
    required:
      - count
      - next
      - previous
      - results

  SharedCameraListResponse:
    type: object
    title: Shared Camera list
    properties:
      count:
        type: integer
        description: Count of all shared cameras
      next:
        type: ['string','null']
        format: uri
        description: Next page from pagination
      previous:
        type: ['string','null']
        format: uri
        description: Previous page from pagination
      results:
        type: array
        description: List of cameras shared with the user
        items:
          $ref: '#/definitions/SharedCameraObject'
    required:
      - count
      - next
      - previous
      - results


# TODO:
#    example:
#      count: 10
#      next: 'https://api.angelcam.com/cameras/?limit=10&offset=10'
#      previous: 'https://api.angelcam.com/cameras/?limit=10&offset=0'

  CameraObject:
    type: object
    title: Camera object
    properties:
      id:
        type: integer
        minimum: 1
        description: Camera ID
      name:
        type: string
        description: Camera name
      type:       # todo camera type should be enum!
        type: string
        enum:
          - h264
          - mjpeg
        description: Camera type
      snapshot:
        x-$ref: '#/definitions/SnapshotObject'
      status:
        type: string
        enum:
          - offline
          - online
          - unknown
      event_api_hash:
        type: string
        description: 'Event API hash - unique token for posting events to camera timeline from embedded devices without authentication (do not disclose)'
      live_snapshot:
        type: ['string', 'null']
        format: uri
        description: Live snapshot URL
      streams:
        type: array
        items:
          $ref: '#/definitions/StreamObject'
        description: Available camera streams
      applications:
        type: array
        items:
          $ref: '#/definitions/ApplicationObject'
    required:
      - id
      - name
      - type
      - snapshot
      - status
      - live_snapshot
      - streams
      - applications
    example:
      id: 157
      name: 'Parkside Office'
      type: 'h264'
      snapshot:
          url:  'https://dsw4ncxjbie85.cloudfront.net/snapshot/81/y8jol6kbn0ol1gh2.jpg'
          created_at: '2017-03-29T15:41:39Z'
      status: online
      live_snapshot: "http://m1.test.angelcam.com/stream/81/snapshot.jpg?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE5NjIxOCwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiODEifQ==.85b552be2b7f0abaa0a3b5b4f412877f8af92f691c7d0c6db6b8c517ea8f921c"
      streams:
        - format: "mjpeg"
          url: "http://m1.test.angelcam.com/stream/81/stream.mjpeg?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE5NjIxOCwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiODEifQ==.85b552be2b7f0abaa0a3b5b4f412877f8af92f691c7d0c6db6b8c517ea8f921c"
          refresh_rate: 0.1
        - format: "mp4"
          url: "http://m1.test.angelcam.com/stream/81/stream.mp4?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE5NjMxNiwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiODEifQ==.b5b4cf405cf054701a75b359f4069d2af8a102c5ffd8f33cbb560a4638c7cb71"
        - format: "hls"
          url: "http://m1.test.angelcam.com/stream/81/playlist.m3u8?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE5NjQwMSwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiODEifQ==.8ac35b434e768e8f10161b2d74da492f5fd8a8c115c18cbb421017665acd908a"
      applications:
        - LSA
        - CRA

  CameraGuestObject:
    type: object
    title: Guest object
    properties:
      id:
        type: integer
        description: Guest id
      first_name:
        type: ['string', 'null']
        description: Guest's first or given name.
      last_name:
        type: ['string', 'null']
        description: Guest's last or family name.
      email:
        type: string
        format: email
        description: Guest's email.
      permissions:
        $ref: '#/definitions/CameraGuestPermissionObject'
    required:
      - email
      - permissions
    example:
      id: 35
      first_name: "Saint"
      last_name: "Michael"
      email: "michael@angelcam.com"
      permisions:
        can_view_rec: true

  CameraGuestPermissionObject:
    type: object
    title: Guest permission
    properties:
      can_view_rec:
        type: boolean
        description: Can view camera recordings
        x-example: false

  SharedCameraObject:
    type: object
    title: Shared camera object
    properties:
      id:
        type: integer
        minimum: 1
        description: Camera ID
      name:
        type: string
        description: Camera name
      type:       # todo camera type should be enum!
        type: string
        enum:
          - h264
          - mjpeg
        description: Camera type
      snapshot:
        x-$ref: '#/definitions/SnapshotObject'
      status:
        type: string
        enum:
          - offline
          - online
          - unknown
      live_snapshot:
        type: ['string', 'null']
        format: uri
        description: Live snapshot URL
      streams:
        type: array
        items:
          $ref: '#/definitions/StreamObject'
        description: Available camera streams
      applications:
        type: array
        items:
          $ref: '#/definitions/SharedApplicationObject'
      owner:
        $ref: '#/definitions/OwnerObject'
    required:
      - id
      - name
      - type
      - snapshot
      - status
      - live_snapshot
      - streams
      - applications
      - owner
    example:
      id: 157
      name: 'Parkside Office'
      type: 'h264'
      snapshot:
          url:  'https://dsw4ncxjbie85.cloudfront.net/snapshot/81/y8jol6kbn0ol1gh2.jpg'
          created_at: '2017-03-29T15:41:39Z'
      status: online
      live_snapshot: "http://m1.test.angelcam.com/stream/81/snapshot.jpg?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE5NjIxOCwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiODEifQ==.85b552be2b7f0abaa0a3b5b4f412877f8af92f691c7d0c6db6b8c517ea8f921c"
      streams:
        - format: "mjpeg"
          url: "http://m1.test.angelcam.com/stream/81/stream.mjpeg?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE5NjIxOCwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiODEifQ==.85b552be2b7f0abaa0a3b5b4f412877f8af92f691c7d0c6db6b8c517ea8f921c"
          refresh_rate: 0.1
        - format: "mp4"
          url: "http://m1.test.angelcam.com/stream/81/stream.mp4?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE5NjMxNiwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiODEifQ==.b5b4cf405cf054701a75b359f4069d2af8a102c5ffd8f33cbb560a4638c7cb71"
        - format: "hls"
          url: "http://m1.test.angelcam.com/stream/81/playlist.m3u8?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE5NjQwMSwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiODEifQ==.8ac35b434e768e8f10161b2d74da492f5fd8a8c115c18cbb421017665acd908a"
      applications:
        - CRA
      owner:
          email: "john@apple.com"
          first_name: "John"
          last_name: "Appleseed"

  SnapshotObject:
    type: object
    title: Snapshot object
    properties:
      url:
        type: string
        format: uri
        description: URL of the snapshot image
      created_at:
        type: string
        format: date-time
        description: 'The date and time when the snapshot was created for the first time'
    required:
      - url
      - created_at
    example:
      url: 'https://dsw4ncxjbie85.cloudfront.net/snapshot/157/h8yeodu1mrjtiiok.jpg'
      created_at: '2017-03-31T12:29:10Z'

  StreamObject:
    type: object
    properties:
      url:
        type: string
        format: uri
        description: Stream URL
      format:
        type: string
        enum:
          - hls
          - fmp4
          - mjpeg
      refresh_rate:
        type: number
        format: float
        description: Stream refresh rate
    required:
      - url
      - format
    example:
      url: 'http://m2-eu1.test.angelcam.com/stream/157/stream.mjpeg?token=eyJ0aW1lIjogMTQ5NjkzNDYyODE4Mjc3OCwgInRpbWVvdXQiOiAzNjAwLCAiYWxpYXMiOiAiMTU3In0%3D.d365e2a6fbdfae0bfa5b27175a6ea57de1ae31844fdcd22ff5f56da10a970d65'
      format: 'mjpeg'

  ApplicationObject:
    type: object
    properties:
      code:
        type: string
        enum:
          - LSA
          - CRA
          - VVA
          - VPA
          - TLA
    required:
      - code
    example:
      code: LSA

  SharedApplicationObject:
    type: object
    properties:
      code:
        type: string
        enum:
          - CRA
    required:
      - code
    example:
      code: CRA

  RecordingResponse:
    type: object
    title: Recording information
    required:
      - status
      - retention
    properties:
      status:
        type: string
        enum:
          - READY
          - CONNECTING
          - RECORDING
          - STOPPING
          - ERROR
        description: |
            Recording status values have the following meaning:

            * `READY` - Not recording (recording is ready to be started)
            * `CONNECTING` - Recorder is trying to connect to the stream (this usually indicates camera connectivity problems; the recorder keeps trying to connect).
            * `RECORDING` - Recorder is connected to the stream and records are being created
            * `STOPPING` - Recording is stopping
            * `ERROR` - Error occurred when recording (this indicates a possible issue with Angelcam infrastructure)
      retention:
        type: ['string','null']
        description: >
            Retention period in ISO 8601 duration format tells how long in past we store the footage. Example:
            P7D means 7 days.
    example:
      status: RECORDING
      retention: P7D

  RecordingTimelineResponse:
    type: object
    title: Recording timeline object
    properties:
      start:
        type: string
        format: date-time
        description: >
          Start time of timeline (the value you entered in the query parameter).
          Example: `2017-01-01T00:00:00Z`.
      end:
        type: string
        format: date-time
        description: >
          End time of timeline (the value you entered in the query parameter).
          Example: `2017-01-01T00:00:00Z`.
      segments:
        type: array
        description: Array of recording segments.
        items:
          $ref: '#/definitions/SegmentObject'
    example:
      start: '2017-01-01T00:00:00Z'
      end: '2017-01-01T03:32:19Z'
      segments:
        - start: '2017-06-09T00:00:18Z'
          end: '2017-06-09T03:25:28Z'
        - start: '2017-06-09T04:19:42Z'
          end: '2017-06-09T010:39:31Z'

  SegmentObject:
    type: object
    title: Segment object
    properties:
      start:
        type: string
        format: date-time
        description: 'Start of record segment. Example: `2017-01-01T00:00:00Z`.'
      end:
        type: string
        format: date-time
        description: 'End of record segment. Example: `2017-01-01T00:00:00Z`.'

  RecordingStreamResponse:
    type: object
    title: Recording stream object
    properties:
      url:
        type: string
        description: URL of a stream.
        example: >
          https://rec-streamer-eu-central-1.angelcam.com/streams/cefa6471a38f469585b46675fc992614/playlist.m3u8
      format:
        type: string
        enum:
          - hls
          - fmp4
          - mjpeg
        description: Stream format.
        example: hls
      stream_info:
        type: string
        description: URL of a recorded stream info endpoint.
        example: 'https://api.angelcam.com/v1/recording/stream/rec-streamer-eu-central-1/cefa6471a38f469585b46675fc992614/'
    example:
      url: 'https://rec-streamer-eu-central-1.angelcam.com/streams/df0600b7487a44d480217db7713720d3/playlist.m3u8'
      format: 'hls'
      stream_info: 'https://api.angelcam.com/v1/recording/stream/rec-streamer-eu-central-1/df0600b7487a44d480217db7713720d3/'

  RecordingStreamInfoResponse:
    type: object
    title: Recording stream information
    properties:
      current_time:
        type: string
        format: date-time
        description: Current time in a stream.
    example:
      current_time: '2017-01-01T00:00:00Z'

  ClipListResponse:
    type: object
    title: Clip list
    properties:
      count:
        type: integer
        minimum: 0
        description: Count of all clips
      next:
        type: ['string','null']
        format: uri
        description: Next page from pagination
      previous:
        type: ['string','null']
        format: uri
        description: Previous page from pagination
      results:
        type: array
        description: List of clips for the camera
        items:
          $ref: '#/definitions/ClipObject'
    required:
      - count
      - next
      - previous
      - results
    example:
      count: 10
      next: null
      previous: null
      results:
        - id: 'b9aad334-07ba-4660-9f18-041875ec1ea4'
          name: Frontdoor loitering
          status: 'READY'
          sharing_token: 'cd13975b-0b08-48f5-bd39-3f7d2a0c935a'
          start: '2017-01-01T00:00:20'
          end: '2017-01-01T00:25:20'
          created_at: '2017-02-01T02:37:21'
          stream:
            format: 'hls'
            url: 'https://rec-streamer-us-west-2.angelcam.com/streams/59a00adb74324ba891f26275739ea49c/playlist.m3u8'
          download_url: 'https://s3.us-west-2.amazonaws.com/rec-prod.us-west-2.angelcam.com/c/944c8ee2-0230-4dbf-b03d-de09dc4a79da.mp4?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJ6CMNV7APGJB5JYQ%2F20180416%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20180416T093432Z&X-Amz-Expires=86400&X-Amz-Signature=40b3701f85114ed22f76a97e6b0c099b1dc7301645bd2db8380c5fa824c59455&X-Amz-SignedHeaders=host&response-content-disposition=attachment%3B%20filename%3D%22Frontdoor%20loitering.mp4%22'

  ClipObject:
    type: object
    title: Clip object
    properties:
      id:
        type: string
        minimum: 1
        description: Clip UUID
      created_at:
        type: string
        minimum: 1
        description: Time when the clip was created
      name:
        type: string
        minimum: 1
        description: Clip name
      status:
        type: string
        description: Status of clip processing
        enum:
          - PENDING
          - BUILDING
          - READY
          - ERROR
      start:
        type: string
        minimum: 1
        description: Start time of the clip
      end:
        type: string
        minimum: 1
        description: End time of the clip
      sharing_token:
        type: string
        description: Security token for sharing the clip without authentication (UUID)
      stream:
        description: Stream for clip playback
        x-$ref: '#/definitions/RecordingStreamResponse'
      download_url:
        type: string
        description: URL for download of the clip as MP4/AVI file (the URL contains security token valid for a limited time)
    required:
      - id
      - created_at
      - download_url
      - end
      - name
      - sharing_token
      - start
      - status
      - stream
    example:
      id: 'b9aad334-07ba-4660-9f18-041875ec1ea4'
      name: Frontdoor loitering
      status: 'READY'
      sharing_token: 'cd13975b-0b08-48f5-bd39-3f7d2a0c935a'
      start: '2017-01-01T00:00:20'
      end: '2017-01-01T00:25:20'
      created_at: '2017-02-01T02:37:21'
      stream:
        format: 'hls'
        url: 'https://rec-streamer-us-west-2.angelcam.com/streams/59a00adb74324ba891f26275739ea49c/playlist.m3u8'
      download_url: 'https://s3.us-west-2.amazonaws.com/rec-prod.us-west-2.angelcam.com/c/944c8ee2-0230-4dbf-b03d-de09dc4a79da.mp4?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJ6CMNV7APGJB5JYQ%2F20180416%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20180416T093432Z&X-Amz-Expires=86400&X-Amz-Signature=40b3701f85114ed22f76a97e6b0c099b1dc7301645bd2db8380c5fa824c59455&X-Amz-SignedHeaders=host&response-content-disposition=attachment%3B%20filename%3D%22Frontdoor%20loitering.mp4%22'

  EventListResponse:
    type: object
    title: Event list
    properties:
      count:
        type: integer
        minimum: 0
        description: Count of all events
      next:
        type: ['string','null']
        format: uri
        description: Next page from pagination
      previous:
        type: ['string','null']
        format: uri
        description: Previous page from pagination
      results:
        type: array
        description: List of events owned by the user
        items:
          $ref: '#/definitions/EventObject'
    required:
      - count
      - next
      - previous
      - results
    example:
      count: 10
      next: 'https://api.angelcam.com/v1/events/?limit=10&offset=10'
      previous: 'https://api.angelcam.com/v1/events/?limit=10&offset=0'
      results:
        - camera: 20
          title: Door open
          source: IFTTT
          received: '2017-01-01T00:00:16Z'
          snapshot:
            - url:  'https://dsw4ncxjbie85.cloudfront.net/snapshot/81/y8jol6kbn0ol1gh2.jpg'
              created_at: '2017-01-01T00:00:20'

  EventObject:
    type: object
    title: Event object
    properties:
      camera:
        type: integer
        minimum: 1
        description: Camera ID
      title:
        type: string
        description: Event title
      source:
        type: string
        description: Name of event source
      received_at:
        type: string
        description: Time when event occurred or was received by Angelcam
      snapshot:
        description: Snapshot is created by Angelcam when certain types of events are received
        x-$ref: '#/definitions/SnapshotObject'
    required:
      - camera
      - source
      - received_at
    example:
      camera: 20
      title: Door open
      source: IFTTT
      received: '2017-01-01T00:00:16Z'
      snapshot:
        - url:  'https://dsw4ncxjbie85.cloudfront.net/snapshot/81/y8jol6kbn0ol1gh2.jpg'
          created_at: '2017-01-01T00:00:20'


  ErrorGeneric:
    type: object
    title: Error object
    properties:
      title:
        type: string
      detail:
        type: string
      status:
        type: integer
    required:
      - title
      - detail
      - status

  Error404NotFound:
    allOf:
      - $ref: '#/definitions/ErrorGeneric'
    title: Error 404 Not Found
    example:
      title: not_found
      detail: Not Found
      status: 404

  Error401Unauthorized:
    allOf:
      - $ref: '#/definitions/ErrorGeneric'
    title: Error 401 Unauthorized
    example:
      title: not_authenticated
      detail: Authentication credentials were not provided
      status: 401

  Error400Invalid:
    allOf:
      - $ref: '#/definitions/ErrorGeneric'
    title: Error 400 Bad Request
    example:
      title: invalid
      detail: Invalid hash
      status: 400

  Error400InvalidParams:
    type: object
    title: Error 400 Invalid Parameters
    properties:
      title:
        type: string
      detail:
        type: object
      status:
        type: integer
    required:
      - title
      - detail
      - status
    example:
      title: invalid
      detail:
        - refresh_rate:
          - 'valid number is required.'
          - 'Ensure this value is greater than 0.'
        - max_width:
          - 'valid number is required.'
          - 'Ensure this value is greater than or equal to 1.'
      status: 400

parameters:
  cameraId:
    name: camera_id
    in: path
    type: integer
    minimum: 1
    x-example: 3
    required: true
    description: Camera ID

  clipId:
    name: clip_id
    in: path
    type: string
    minimum: 1
    x-example: cd13975b-0b08-48f5-bd39-3f7d2a0c935a
    required: true
    description: Clip UUID

  guestId:
    name: guest_id
    in: path
    type: integer
    minimum: 1
    x-example: 4
    required: true
    description: Guest ID

  sharedCameraId:
    name: camera_id
    in: path
    type: integer
    minimum: 1
    x-example: 21
    required: true
    description: Camera ID

responses:
  Error404NotFound:
    description: The specified resource was not found
    schema:
      $ref: '#/definitions/Error404NotFound'

  Error404CraNotAdded:
    description: This camera was not find or it doesn't have enabled Cloud Recording Application (CRA).
    schema:
      $ref: '#/definitions/Error404NotFound'

  Error401Unauthorized:
    description: Missing or invalid authorization.
    schema:
      $ref: '#/definitions/Error401Unauthorized'

  Error400Invalid:
    description: Bad Request
    schema:
      $ref: '#/definitions/Error400Invalid'

  Error400InvalidParams:
    description: Query params are invalid.
    schema:
      $ref: '#/definitions/Error400InvalidParams'

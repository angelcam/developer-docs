type: oauth2
description: >

  For OAuth2 we support two different authentication workflows (_grant types_
     in terms of OAuth):


     * You ask your users for their Angelcam usernames and passwords (_resource
     owner password-based_ in terms of OAuth)

     * You ask Angelcam and we authenticate your users, similar to how Google or
     Facebook works if you choose "Sign-in using
       Google/Facebook" (_authorization code_ in terms of OAuth)

  Both authentication types result in the same - you exchange username/password
  or authorization code by calling `/oauth/token/` endpoint for access token.
  All API calls must supply this access token with `Authorization: Bearer ` as
  header. For example, with cURL commandline tool, your request would contain
  something like this:

    ```curl -H "Authorization: Bearer <Your Access Token>" -X GET  "https://api.angelcam.com/v1/cameras/?limit=5"```

  These access tokens also have a limited-time validity (usually 10 hours) and
  youâ€™ll have to ask for new access token using refresh token when current
  access token expires.

  ### Obtaining your OAuth2 Client ID and Client Secret

  To obtain credentials for using OAuth2 please [contact our
  support](https://www.angelcam.com/support/).

  ### Obtaining access token using password grant type

  ![Password grant type sequence diagram](./assets/password_grant_type.png)


  Password grant type is a more basic and easier way for authorization, but it
  is less safe for Angelcam users. With this grant type, it's you who asks for
  the credentials in the UI and it's your app that calls `oauth/token/` to
  exchange user credentials for the bearer token.


  Be aware! DO NOT save the password or username of any user under any
  circumstances. To implement a "Remember me" checkbox in your app, save the
  refresh token instead and ask for a new access token whenever the access token
  expires. You can get a new access token using the refresh token and the
  `oauth/token/` endpoint.


  You will need the client ID as well as the username and password of an
  Angelcam account. For example if your client ID is
  `DBaJcGbAT2Tbvbrz0fLh1uRmYURprJAQPxwFsgoo` and the Angelcam account is `
  user@example.com` with password `mypassword` (this is the password the user
  would use to login to My Angelcam site; if you were given client secret by
  Angelcam support, you won't need it at the moment) the request would be:

      curl -X POST https://my.angelcam.com/oauth/token/ -d "client_id=DBaJcGbAT2Tbvbrz0fLh1uRmYURprJAQPxwFsgoo&scope=user_access&grant_type=password&username=user%40example.com&password=mypassword"

  The API response should look like

      {"refresh_token": "aFBNWhoLnq7hSTEVII5ELd9g20NjxC", "scope": "read write", "access_token": "1CP9xR6tqpRHzaZxWcFAp3GtkFcXEQ", "expires_in": 36000, "token_type": "Bearer"}


  Verify the authorization worked

      curl -H "Authorization: Bearer 1CP9xR6tqpRHzaZxWcFAp3GtkFcXEQ" -X GET "https://api.angelcam.com/v1/me/"

  You should see information about your account

      {"id":1234,"email":"user@example.com","first_name":"Keyshawn","last_name":"Jacobs","phone":"+1608494652"}



  ### Obtaining access token using authorization code grant type

  ![Authorization code grant sequence diagram](./assets/code_grant.png)


    The authorization code grant type should be very familiar for you if you've ever signed
    into a web app using your Facebook or Google account.

    Authorization code grant type is safer but more difficult to implement and
    requires the presence of a web browser on the user's device to display the Angelcam account sign-in web page. When users
    submit the form and confirm that your app will have access to their data, we check their credentials and redirect
    them back to a URL of your app (`redirect_uri`), which you have specified. This process works in the very same way as when you click a "Sign-in using Google/Facebook" button.

  Your app sends GET request to `https://api.angelcam.com/oauth/authorize/` with
  the
    following query parameters:
    * `response_type` (required)- authorization grant type with fixed value `code`
    * `client_id` (required)- your client ID, obtained from Angelcam
    * `redirect_uri` (required)- URI within your app where users will be
    redirected after a successful authentication. You
      must ask Angelcam to whitelist chosen `redirect_uri` for your client ID otherwise you will get a 400 response with
      "Mismatching redirect URI" error.
    * `scope` (required) - space delimited list of scopes
    * `state` (optional) - value that serves as
    [CSRF](https://en.wikipedia.org/wiki/Cross-site_request_forgery) token.
      This parameter is optional but highly recommended. You should store the value of the CSRF token and compare the
      `state` returned by Angelcam with the value you sent in the original request.

  Here is an example of how the resulting request would look like:

      GET https://api.angelcam.com/oauth/authorize/?response_type=code&client_id=XU0aXeP1299oS48KnZmxhqWUR928jsmFKosdrfMS&scope=user_access%20camera_access&state=my_csrf_secret&redirect_uri=http://a948dfc1.ngrok.io

    All of these parameters will be validated by the authorization server. The
    users will then be asked to log in to approve your app.

    ![Click to see picture of *OAuth screen asking for user
    approval](./assets/api_oauth_code_authorize_app.png)


    If your `redirect_uri` is for example
    `https://api.mysuperapp.com/oauth/authorized/`, the resulting URL we redirect

    your users to will be:

        https://api.mysuperapp.com/oauth/authorized/?state=my_csrf_secret&code=hTmV8rbgz2TR2DFr1jha2aOTdMKFHY.

    Note these query parameters were appended to redirect URI:


    * `state` - the state parameter sent in the original request. You should
    compare this with the value you previously
      saved to ensure that the authorization code obtained through requests were made by the same client
    * `code` - the authorization code that you will exchange at `oauth/token/` for
    a bearer token

  Example of request for exchanging `authorization_code` for `access_token`:

      curl -X POST  https://api.angelcam.com/oauth/token/ -F grant_type=authorization_code -F client_id=XU0aXeP1299oS48KnZmxhqWUR928jsmFKosdrfMS -F client_secret=asdjfghewklcoeru534vj -F code=hTmV8rbgz2TR2DFr1jha2aOTdMKFHY -F redirect_uri=http://a948dfc1.ngrok.io

  Example of correct response:

      {
          "access_token": "<your access token>",
          "expires_in": 36000,
          "token_type": "Bearer",
          "scope": "user_access",
          "refresh_token": "<your refresh token>"
      }


  ### Refreshing access token with refresh token

  The granted access token is valid just for short period of time (by default it
  is valid for 10 hours). The exact expiration time can be found in `expires_in`
  attribute.

  A common practice of how to manage expiration is to refresh a token when a
  `401 Unauthorized` response is returned from any endpoint since all API
  endpoints requests must be authenticated. Be aware that refresh token itself
  expires in 30 days. After that new access token using your grant type needs to
  be obtained.


   Example of unauthorized response:

       HTTP/1.1 401 Unauthorized
       Date: Thu, 27 Apr 2017 10:41:58 GMT
       Content-Type: application/json
       WWW-Authenticate: Bearer realm="api"

       {"status":401,"title":"not_authenticated","detail":"Authentication credentials were not provided."}

  A new `access_token` can be obtained using a `refresh_token` when the current
  one expires. A `refresh_token` has long expiration time (usually 30 days) and
  it can be used only once. A new `refresh_token` is issued when the client
  refreshes the `access_token`, which causes all previous tokens to become
  invalid.

   To refresh the `access_token`, send `POST` request to `oauth/token/`
   endpoint with the following fields:

     * `refresh_token`
     * `client_id`
     * `grant_type` with `refresh_token` value

  The server will then generate new `access_token` and `refresh_token`.


  Example of request:

      curl -X POST https://api.angelcam.com/oauth/token/ -F grant_type=refresh_token -F client_id=XU0aXeP1299oS48KnZmxhqWUR928jsmFKosdrfMS -F refresh_token=4fjgerkgslgrshg39843fgjdg

  Example of correct response:

      {"access_token": "<your new access token>", "expires_in": 36000, "token_type": "Bearer", "scope": "user_access", "refresh_token": "<your new refresh token>"}

   A refresh token can be invalidated by the `oauth/token-revoke/` endpoint.

  ### Available scopes
flows:
  authorizationCode:
    authorizationUrl: 'https://api.angelcam.com/oauth/authorize/'
    tokenUrl: 'https://api.angelcam.com/oauth/token/'
    scopes:
      user_access: Permission to access user information
      user_delete: Permission to delete the current user account
      camera_access: Permission to list cameras and to get details of a specific camera
      camera_create: Permission to create cameras
      camera_manage: Permission to update cameras
      camera_delete: Permission to delete cameras
      camera_guest_access: Permission to access camera guest
      camera_guest_manage: Permission to manage camera guest
      public_cameras_access: Permission to access public cameras
      arrow_client_access: Permission to access Arrow clients
      arrow_client_manage: Permission to manage Arrow clients
      event_access: Permission to access events
      recording_access: Permission to access camera recordings
      recording_manage: Permission to manage camera recording (incl. plan changes)
      recording_start_stop: Permission to start and stop recording on camera
      recording_clips_access: Permission to access recording clips
      recording_clips_create: Permission to create recording clips
      recording_clips_share: Permission to share recording clips
      sensor_access: Permission to list sensors and to get details of a specific sensor
      sensor_manage: 'Permission to create, update and delete sensors'
      broadcasting_access: >-
        Permission to see general broadcasting information and access
        broadcasting streams
      broadcasting_manage: Permission to change broadcasting settings
      broadcasting_start_stop: Permission to start and stop public broadcasting on camera
      client_access: >-
        Permission to list resellers clients and get details of a specific
        client
      client_create: Permission to create client account
      client_manage: Permission to update clients detail
      streams_detect: Permission to detect camera streams
      sites_access: Permission to access sites
      sites_manage: 'Permission to create, update and delete sites'
      services_access: Permission to access available services
      trials_access: Permission to access available trials
      trials_activate: Permission to activate a trial
      active_services_access: Permission to access active services
      active_services_manage: Permission to manage active services
      orders_access: Permission to access orders
      messages_access: Permission to access RTS messages
      messages_manage: Permission to manage RTS messages
  password:
    tokenUrl: 'https://api.angelcam.com/oauth/token/'
    scopes:
      user_access: Permission to access user information
      user_delete: Permission to delete the current user account
      camera_access: Permission to list cameras and to get details of a specific camera
      camera_create: Permission to create cameras
      camera_manage: Permission to update cameras
      camera_delete: Permission to delete cameras
      camera_guest_access: Permission to access camera guest
      camera_guest_manage: Permission to manage camera guest
      arrow_client_access: Permission to access Arrow clients
      arrow_client_manage: Permission to manage Arrow clients
      event_access: Permission to access events
      recording_access: Permission to access camera recordings
      recording_manage: Permission to manage camera recording (incl. plan changes)
      recording_start_stop: Permission to start and stop recording on camera
      recording_clips_access: Permission to access recording clips
      recording_clips_create: Permission to create recording clips
      recording_clips_share: Permission to share recording clips
      sensor_access: Permission to list sensors and to get details of a specific sensor
      sensor_manage: 'Permission to create, update and delete sensors'
      broadcasting_access: >-
        Permission to see general broadcasting information and access
        broadcasting streams
      broadcasting_manage: Permission to change broadcasting settings
      broadcasting_start_stop: Permission to start and stop public broadcasting on camera
      client_access: >-
        Permission to list resellers clients and get details of a specific
        client
      client_create: Permission to create client account
      client_manage: Permission to update clients detail
      streams_detect: Permission to detect camera streams
      sites_access: Permission to access sites
      sites_manage: 'Permission to create, update and delete sites'
      services_access: Permission to access available services
      trials_access: Permission to access available trials
      trials_activate: Permission to activate a trial
      active_services_access: Permission to access active services
      active_services_manage: Permission to manage active services
      orders_access: Permission to access orders
      messages_access: Permission to access RTS messages
      messages_manage: Permission to manage RTS messages
      rts_settings_access: Permission to access RTS settings
      rts_settings_manage: Permissioon to manage RTS settings
      rts_arming_manage: Permission to arm and disarm RTS

openapi: 3.0.0
info:
  version: 2020.05.12
  title: Angelcam API
  contact:
    email: support@angelcam.com
  x-logo:
    url: ./assets/logo-angelcam.svg
  description: >

    # Angelcam API


    > If you have any questions please feel free to contact our [support
    team](https://www.angelcam.com/support/).


    Welcome! 


    This document will help guide you through how to use Angelcam’s RESTful API.
    You’ll find that the

    RESTful API is not difficult to use, but it requires some understanding of
    certain concepts behind Angelcam services.

    ## Quickstart guide

    1. [Go to My Angelcam](https://my.angelcam.com/dashboard/personal-token/)
    and generate Personal Access Token with scope `user_access`


    2. Perform your first successful API request:


        curl -H "Authorization: PersonalAccessToken <Your Token>" -X GET "https://api.angelcam.com/v1/me/"


    3. Congrats! You've just successfully retrieved info about your user
    account.


    ## Nuts and bolts


    ### HTTPS

    All API calls have to be made over HTTPS. Calls made over plain HTTP will
    fail.


    ### Plain JSON


    The RESTful API runs over HTTP/1.1 and communicates using plain
    `application/json`.


    ### Trailing /


    Lastly, please keep in mind that all endpoint URLs require a trailing slash
    (`/`). For example,

    `cameras/282929/recording`, will result in a "404 Not Found". The correct
    URL in this case, with a trailing slash, is

    `cameras/282929/recording/`.


    ### Caching


    The API doesn't include any additional caching features, besides what is
    implied by the protocol layer.


    ### Rate limiting

    Some endpoints have rate limiting in place to protect our service from
    excessive amounts of requests. If you reach the limit, the server will
    respond with HTTP 429 and the `Retry-After` HTTP header will be set to the
    number of seconds that your client needs to wait before retrying the
    request.

    ### Resource Embedding and Field Fetching


    This API doesn't support the embedding of related resources, nor
    client-driven field fetching.


    ## Pagination


    Some endpoints, like `cameras/`, employ pagination with the use of the
    `limit` and `offset` parameters. Each paginated

    endpoint response has these fields:


    - `count` - total number of items

    - `next` - is link to next page of paginated result, can be null if reached
    end of set

    - `previous` - is link to previous set of paginated result, can be null if
    `offset` is 0

    - `results` - current paginated set


    We recommend you always explicitly set the `limit` parameter to ensure you
    know how many results, per page, you'll get.

    If you omit `limit`, the page will contain 100 items, at most.


    ### Setting the limit parameter


    Let’s say you need to request all the cameras of the user, but only want 5
    results at a time. Your `GET` would look

    something like this:

        $ curl -H "Authorization: Bearer " -X GET "https://api.angelcam.com/v1/cameras/?limit=5"

    Note the `limit` parameter in this call is set to 5, so the response shows
    items 0 through 4.


    ### GET the next page of results


    Next, let’s say you want to make a call to return the next page from the
    previous example. As you’ll see below, the

    `offset` parameter in the following sample link is 5, so the next page of
    results will show items 5 through 9:

        $ curl -H "Authorization: Bearer " -X GET "https://api.angelcam.com/v1/cameras/?limit=5&offset=5"

    ### How do I know if there are more pages?


    When the response contain null value of `next`, you know that you've reached
    the end.


    ## Time and duration formats


    ### Time and date formats


    Whenever you need to specify or have the API send you a date and time, it
    will be in the ISO 8601

    _YYYY-MM-DDTHH:MM:SSZ_ format (i.e. 2016-03-19T13:15:32Z) where:


    * YYYY is the year (i.e. 2016), MM is the month (i.e. 03), and DD is the day
    of the month (i.e. 19)

    * T is the delimiter between the date and time

    * HH is the hour, in 24-hour format (i.e. 1PM is 13), MM is the minute (i.e.
    15), and SS is the seconds (i.e. 32)

    * Z indicates the UTC (GMT 0) timezone


    All times from the API have both a date and time. You must pass a time part
    in all inputs, even if it's 00:00:00.


    All times from the API are in UTC. Similarly, all time inputs are expected
    in a UTC timezone.


    ### Duration format


    Some parts of the API, like the retention field in `cameras/{camera_id}/`
    and `cameras/`, use duration to denote a

    span of time (i.e. "30 days" or "2 months"). We use the standard ISO 8601
    duration format which uses the

    _P[n]Y[n]M[n]DT[n]H[n]M[n]S_ format. Here are a few examples of various
    durations:


    * PT30S - 30 seconds

    * PT2M - 2 minutes

    * P30D - 30 days

    * P2M - 2 months

    * P2M10D - 2 months and 10 days

    * P3Y6M4DT12H30M5S - 3 years, 6 months, 4 days, 12 hours, 30 minutes, and 5
    seconds



    # Authentication

    All API requests have to be authenticated. Angelcam API supports two types
    of authentication:

    - [OAuth2](/#section/Authentication/OAuth2)

    - [Personal Access Token](/#section/Authentication/PersonalAccessToken)
tags:
  - name: user
    x-displayName: User
  - name: camera
    x-displayName: My cameras
    description: >

      With the `/v1/cameras/` endpoint, you can obtain a paginated list of
      cameras for the current user. Alternatively, if you know an ID of a
      camera, you can get the same information using the
      `/v1/cameras/{camera_id}/` endpoint. In both cases, you'll get important
      information about the camera:


      * camera ID, name and type

      * snapshot (thumbnail of recent camera content)

      * status (online, offline, unknown, ...)

      * list of live stream URLs in various formats to watch


      ## Camera type


      Angelcam platform supports cameras with H.264 or MJPEG video codec. While
      many cameras support both formats, you need to choose which one to use to
      connect your camera to Angelcam. This is indicated by the "type" property
      of the camera resource.


      ## Live stream


      **Important:** The live stream feature is intended for private live video
      monitoring acessible only by the camera owner. The amount of stream
      consumers per camera is limited to 10 concurrent consumers. Angelcam web
      app and Angelcam mobile app also count to this limit. Recording is
      excluded. If you need to broadcast the video to general public or you
      simply need more concurrent stream consumers, use the [broadcasting
      service](https://www.angelcam.com/apps/camera-broadcasting). The
      broadcasting service can be also consumed via API.


      A live stream from a camera can be retrieved from Angelcam CDN. For MJPEG
      cameras, you can obtain only an MJPEG live stream. For H.264 cameras, you
      can choose from multiple stream formats:

       * MJPEG (a stream consisting of key-frames transcoded to MJPEG)
       * HLS
       * fMP4
       * MPEG-TS (experimental)

      Each format has different characteristics making it suitable for certain
      usecases.


      ### MJPEG


      [MJPEG](https://en.wikipedia.org/wiki/Motion_JPEG) (or Motion JPEG) is a
      stream of images in JPEG format. It does not contain audio track and it
      may require higher bandwidth than H.264 encoded video. On the other hand,
      you can easily embed it into an HTML page using the img tag and most
      modern browsers will just play it out of the box (please note that
      Internet Explorer does not support MJPEG). Playing MJPEG requires less CPU
      time, so it's the prefered format if you need to display streams from more
      cameras on a single page. Another advantage is that you can specify the
      maximum frame rate of the stream (e.g. only one frame per 10 seconds) to
      save the bandwidth.


      ### HLS


      [HLS](https://en.wikipedia.org/wiki/HTTP_Live_Streaming) (or HTTP Live
      Streaming) is an HTTP-based protocol designed by Apple and supported by
      majority of video players and web browsers. It is the preferred video
      format for most use cases. Angelcam CDN provides the video as it is
      generated by the camera, so the properties such as bitrate or image
      quality can vary depending on the camera settings and the encoder
      implementation. Please note that playback of H.264 video is resource
      intensive and playing multiple streams at once can cause signicant load to
      the viewer's system.


      ### fMP4


      [fMP4](https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-3.3)
      (or Fragmented MP4) is a video format provided by Angelcam CDN for use
      cases requiring low latency between the live stream and real time. The
      format is not as widely supported as HLS, though many modern web browsers
      support it. Mobile devices might have problems with this format.


      ### MPEG-TS (experimental)


      [MPEG-TS](https://en.wikipedia.org/wiki/MPEG_transport_stream) is provided
      for the same purpose as fragmented MP4 because it offers similar latency.
      It may help in situations when the fragmented MP4 cannot be used.


      ## Snapshot


      A snapshot is an affordable and a quick way to give your users a sample of
      their on-going live stream, by periodically saving a picture of it. It's
      intended to give a preview of the camera's content without actually
      creating a connection to the camera, which can be a resource-expensive
      operation.


      Please note, a snapshot may be up to 24 hours old but we'll automatically
      initiate a refresh whenever you access camera endpoints in the API. If the
      snapshot age is important to you, check the `created_at` field in the
      snapshots array returned by the `/v1/cameras/{camera_id}/` and the
      `/v1/cameras/` endpoints.


      In cases when a more recent image is required, you can use a live snapshot
      or the MJPEG stream with a low frame rate instead.


      ## Live snapshot


      The live snapshot is a static picture of what the camera is currently
      shooting at the moment. This actually creates a connection to the camera
      and extracts the last key-frame from the camera stream.
  - name: shared-camera
    x-displayName: Shared cameras
    description: >
      For access to cameras which somebody shared with you. In general
      everything is same as in my cameras section, see above, there is only one
      difference. Together with cameras information you get also a camera's
      public page url
  - name: camera-guest
    x-displayName: Manage camera guests
    description: >
      You can share your camera with a guest, this means, you allow guests to
      view stream from your camera. There is also an option to share also
      recordings together with live stream.


      When you adding new guest, you just need their email. Then we send them an
      email informing them that you share camera with them. In case when there
      was no account with given email we precreate an account for these guest.
  - name: recording
    x-displayName: My cameras recording
    description: >

      ![Recording sequence diagram](./assets/recording_sequence.png)


      The Cloud Recording application (CRA) safely stores any content captured
      by your camera to the cloud. If a camera

      doesn't have the CRA application, all camera recording endpoints will
      return 404. Otherwise, you can start by asking general

      recording information using the `cameras/{camera_id}/recording/` endpoint.


      Most notably, this endpoint tells you whether the camera is currently
      recording or not (i.e. recording might not have

      been started by the user yet, there’s an error, etc.). As with all
      "active" operations, the user must use our web

      application to start a recording.


      Another piece of information reported by this endpoint is the retention
      period, which dictates how long a video will be

      stored. This is particularly useful for obtaining a
      `cameras/{camera_id}/recording/timeline/`.


      ## Timeline and segments


      It's important to note that in the Angelcam API there are some terms that
      sound similar but have different meanings:


      * _record_ (noun) - a continuous block of video content, as stored by the
      recording. To clearly distinguish it from a
        “recording” we called it a _record segment_ or simply, _segment_.
      * _recording_ (verb) - the process of capturing a record, or records,
      which are then stored.


      Timeline listening at the `cameras/{camera_id}/recording/timeline/`
      endpoint is a collection of record segments for a

      given camera and time interval. In  order to save bandwidth and resources,
      the maximum length of timeline you can

      request, per single call, is 24 hours.


      If a recording was running uninterrupted, within a specified start and end
      time, the result will contain one segment.

      Often "missing" slots will appear on the timeline, usually because the
      user may have manually stopped the recording or

      there were some camera errors.


      ## Recording stream


      If you know which video segment(s) from the timeline you want to play,
      calling `cameras/{camera_id}/recording/stream/`

      will create a stream from that specified segment(s) and tells you its URL
      and format.


      Using `start` and `end` query parameters, you can specify a beginning and
      ending time of the stream. You can even omit

      the `end` parameter and the stream will play until the very end of the
      recorded footage or, if the camera is currently

      recording, the stream will continue uninterrupted.


      Among other things, the endpoint tells you the URL of
      `recording/stream/{streamer_name}/{stream_id}/` with the stream's

      additional details.


      ## Syncing stream and timeline


      Due to various reasons, the time a user spends watching a stream doesn't
      necessarily have to match the time actually

      elapsed in the recorded video (i.e. a 5-minute long stream takes 6 minutes
      to watch on a user's slow mobile network

      connection due to lag).


      Periodically calling endpoint,
      `recording/stream/{streamer_name}/{stream_id}/`, comes in handy in this
      case, because it

      synchronizes the time shown to the user in your UI, with the current time
      of the stream. This endpoint tells you the

      exact time where the stream is positioned at the current moment. You
      normally don't have to know the `streamer_name`

      and `streamer_id` path parameters, but use the generated endpoint URL as
      reported by `stream_info` field from

      `cameras/{camera_id}/recording/stream/`.
  - name: shared-camera-recording
    x-displayName: Shared cameras recording
    description: >
      Everything is same as in recording for my own cameras. Just replace
      `cameras` by `shared-cameras` in every endpoints url.
  - name: clip
    x-displayName: Recording Clips
    description: Recording Clips
  - name: event
    x-displayName: Events
    description: >
      There is one difference in pagination for events list endpoints compared
      to other list endpoints:
       There is no offset option available. This limitation has several consequences:
        - Pagination can be done only using link in `next` attribute that is part of response
        - Pagination is possible only in one direction (it is not possible to go to previous page)

      However there are filters for `start` and `end` that may be used as an
      alternative or complement for pagination. Retrieved events list is ordered
      by occurred at datetime (newest first).
  - name: sensor
    x-displayName: My sensors
    description: >
      With sensor endpoints you can view, manage and connect sensors to the user
      account.


      Sensor can be bind to one particular already connected
      [camera](#tag/camera) to mark received [events](#tag/event) on camera
      timeline. If camera that sensor is bind to has active [Cloud
      Recording](#tag/recording) event recording can be enabled using these
      endpoints. Event recording will not be applied in the case that the camera
      assigned to the sensor doesn't have Cloud Recording activated.


      To specify event recording length
      [duration](#section/Angelcam-API/Time-and-duration-formats) format must be
      used and currently options for recording length are limited to:
        - 30 seconds
        - 1 minute
        - 2 minutes
        - 5 minutes

      Each sensor is given a unique email and unique hash. Those can be used to
      send [events](#tag/event) to Angelcam. 
  - name: client
    x-displayName: Clients
    description: >
      This part of API makes sense only for reseller users. It provides them a
      way to manage their clients.
  - name: camera-stream-detection
    x-displayName: Camera streams detection
    description: >-
      Using these endpoints you can verify if there are camera streams available
      on specified network address. Detection is asynchronous. For this reason
      there is one endpoint for initializing stream detection and one for
      retrieving result of detection.
  - name: arrow-clients
    x-displayName: Arrow clients
    description: >
      Endpoints for managing Arrow clients. Arrow client is an application that
      powers all Angelcam ready devices such as AngelBoxes, Angelcam ready
      cameras, etc. You can use these endpoints to pair Arrow clients with a
      specific user account, to get some useful information about the clients
      and the services they provide, and to give commands to the clients. Before
      you are allowed to access an Arrow client, you need to pair it with your
      user account.


      ## Pairing an Arrow client

      In order to pair an Arrow client with the current user account, you need
      to:

      1. Make sure that the Arrow client is in pairing mode. An Arrow client is
      in pairing mode only the first 20 minutes after it's started, so you
      probably need to restart the device with the Arrow client before you
      initiate the pairing process.

      2. Initiate the pairing process by sending a POST request to the
      [`arrow-clients/`](#operation/arrow-client-pairing-request) endpoint. The
      API will respond with Arrow client UUID.

      3. Wait until the Arrow client connects to the Angelcam cloud. You can use
      the returned UUID to poll the
      [`arrow-clients/{uuid}/`](#operation/arrow-client-detail) endpoint until
      the API responds with `online` status.
  - name: site
    x-displayName: Sites
    description: >
      Endpoints for accessing and managing sites. Sites are hiearchical
      structure that can be used to organize cameras. Any camera is assigned
      exactly to one site. Each user has a root site. ID of root site can be
      obtained from [Current User Info Endpoint](#tag/user).

        Site can be armed or disarmed. If site is in armed state user will be notified when some event occurs on given site. 
        
        If site is armed or disarmed all its descendants are also (dis)armed.
        
        Camera can be moved from site to site using [Camera Endpoints](#tag/camera)
  - name: broadcasting
    x-displayName: My cameras broadcasting
    description: >
      Endpoints for managing broadcasting settings and retrieving broadcasting
      streams. If a camera doesn't have the Broadcasting service activated, all
      camera broadcasting endpoints will return HTTP 404.


      The broadcasting service can be used whenever you need more concurrent
      stream consumers. It does not necessarily mean that the stream from your
      camera has to be public.
  - name: public-camera
    x-displayName: Public cameras
    description: >
      These endpoints allow to obtain information about all cameras that are
      connected to Angelcam with free public broadcasting enabled.
  - name: service
    x-displayName: Available services
  - name: active-service
    x-displayName: My services
  - name: order
    x-displayName: My Orders
  - name: rts_messages
    x-displayName: Messages
  - name: rts_settings
    x-displayName: Settings
x-tagGroups:
  - name: General
    tags:
      - user
      - client-device
  - name: Billing
    tags:
      - service
      - active-service
      - order
  - name: Camera management
    tags:
      - camera
      - shared-camera
      - camera-guest
      - camera-stream-detection
      - arrow-clients
  - name: Sensor management
    tags:
      - sensor
  - name: Recording
    tags:
      - recording
      - shared-camera-recording
      - clip
  - name: Broadcasting
    tags:
      - broadcasting
      - public-camera
  - name: Events
    tags:
      - event
  - name: Clients management
    tags:
      - client
  - name: RTS
    tags:
      - rts_messages
      - rts_settings
servers:
  - url: 'https://api.angelcam.com/v1'
